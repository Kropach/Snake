local function put_food(self) -- <1>
	self.food = {x = math.random(2, 15), y = math.random(2, 11)} -- <2>
	tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 3) -- <3>
end


function init(self)
	msg.post(".", "acquire_input_focus")

	self.segments = {
		{x = 5, y = 5},
		{x = 6, y = 5},
		{x = 7, y = 5},
		{x = 8, y = 5} }
		self.dir = {x = 1, y = 0}
		self.dirqueue = {} -- <1>
		self.speed = 1.0
		self.alive = true -- <1>
		
		math.randomseed(socket.gettime()) -- <4>
		put_food(self) -- <5>
		
		self.t = 0
end

function update(self, dt)
	self.t = self.t + dt
	if self.t >= 1.0 / self.speed and self.alive then -- <1>
		local newdir = table.remove(self.dirqueue, 1)

		if newdir then
			local opposite = newdir.x == -self.dir.x or newdir.y == -self.dir.y
			if not opposite then
				self.dir = newdir
			end
		end

		local head = self.segments[#self.segments]
		local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y}

		table.insert(self.segments, newhead)

		local tile = tilemap.get_tile("#grid", "layer1", newhead.x, newhead.y) -- <2>

		if tile == 2 or tile == 4 then
			self.alive = false -- <3>
		elseif tile == 3 then
			self.speed = self.speed + 1 -- <4>
			put_food(self)
		else
			local tail = table.remove(self.segments, 1) -- <5>
			tilemap.set_tile("#grid", "layer1", tail.x, tail.y, 1)
		end

		for i, s in ipairs(self.segments) do
			tilemap.set_tile("#grid", "layer1", s.x, s.y, 2)            
		end

		self.t = 0
	end
end

function on_input(self, action_id, action)
	if action_id == hash("up") and action.pressed then
		table.insert(self.dirqueue, {x = 0, y = 1}) -- <5>
	elseif action_id == hash("down") and action.pressed then
		table.insert(self.dirqueue, {x = 0, y = -1})
	elseif action_id == hash("left") and action.pressed then
		table.insert(self.dirqueue, {x = -1, y = 0})
	elseif action_id == hash("right") and action.pressed then
		table.insert(self.dirqueue, {x = 1, y = 0})
	end
end